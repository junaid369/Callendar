{"ast":null,"code":"import React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = value => value instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst HookFormContext = React.createContext(null);\n\nconst useFormContext = () => React.useContext(HookFormContext);\n\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n\n      return undefined;\n    };\n  }\n\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n  const _props = React.useRef(props);\n\n  _props.current = props;\n  React.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name,\n    exact\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = React.useRef(name);\n\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n  const callback = React.useCallback(value => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), value)), [control, exact]);\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state\n  });\n  React.useEffect(() => () => {\n    _mounted.current = false;\n  }, []);\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nvar isString = value => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact\n  } = props || {};\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  const callback = React.useCallback(formState => {\n    if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n      const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n      updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : isUndefined(fieldValues) ? defaultValue : fieldValues);\n    }\n  }, [control, exact, defaultValue]);\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: !isArrayField\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField ? control.unregister(name) : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      onChange: event => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\n\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n\n  data.splice(to, 0, data.splice(from, 1)[0]);\n  return data;\n};\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef(control._getFieldArray(name).map(generateId));\n\n  const _fieldIds = React.useRef(fields);\n\n  const _name = React.useRef(name);\n\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  const callback = React.useCallback(_ref => {\n    let {\n      values,\n      name: fieldArrayName\n    } = _ref;\n\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n  useSubscribe({\n    callback,\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValues => {\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n  }, [control, name]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n    ids.current = append(ids.current, appendValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n  };\n\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prepend(ids.current, prependValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n    updateValues(updatedFieldArrayValues);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insert(ids.current, index, insertValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updatedFieldArrayValues, false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updatedFieldArrayValues, false);\n  };\n\n  const update = (index, value) => {\n    const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, value);\n    ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n    setFields([...updatedFieldArrayValues]);\n    updateValues(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updatedFieldArrayValues, true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValues = convertToArrayPayload(value);\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n\n    control._updateFieldArray(name, () => updatedFieldArrayValues, {}, [...updatedFieldArrayValues], true, false);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n    append: React.useCallback(append$1, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert$1, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(() => fields.map((field, index) => Object.assign(Object.assign({}, field), {\n      [keyName]: ids.current[index] || generateId()\n    })), [fields, keyName])\n  };\n};\n\nfunction createSubject() {\n  let _observers = [];\n\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = observer => {\n    _observers.push(observer);\n\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRadioOrCheckbox = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = ref => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nfunction markFieldsDirty(data) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref2) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref2;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref3 => {\n      let {\n        value\n      } = _ref3;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getRuleValue = rule => isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name\n  };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\n\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = _options.defaultValues || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && Array.isArray(get(_fields, name))) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (_proxyFormState.errors && shouldSetFields && Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && Array.isArray(get(_formState.touchedFields, name))) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n    }\n\n    if (_proxyFormState.dirtyFields) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = name => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const onChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, watched ? {} : fieldState));\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    field ? disabledIsDefined && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true, options.value);\n    return Object.assign(Object.assign(Object.assign({}, disabledIsDefined ? {\n      disabled: options.disabled\n    } : {}), _options.shouldUseNativeValidation ? {\n      required: !!options.required,\n      min: getRuleValue(options.min),\n      max: getRuleValue(options.max),\n      minLength: getRuleValue(options.minLength),\n      maxLength: getRuleValue(options.maxLength),\n      pattern: getRuleValue(options.pattern)\n    } : {}), {\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (radioOrCheckbox ? refs.find(option => option === fieldRef) : fieldRef === field._f.ref) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: Object.assign(Object.assign({}, field._f), radioOrCheckbox ? {\n              refs: refs.concat(fieldRef).filter(live),\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            } : {\n              ref: fieldRef\n            })\n          });\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.array.next({\n        values\n      });\n\n      _subjects.watch.next({\n        values\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref4) => {\n        let [key, value] = _ref4;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      set _fields(value) {\n        _fields = value;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      set _formValues(value) {\n        _formValues = value;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\n\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const _formControl = React.useRef();\n\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n\n  const control = _formControl.current.control;\n  const callback = React.useCallback(value => {\n    if (shouldRenderFormState(value, control._proxyFormState, true)) {\n      control._formState = Object.assign(Object.assign({}, control._formState), value);\n      updateFormState(Object.assign({}, control._formState));\n    }\n  }, [control]);\n  useSubscribe({\n    subject: control._subjects.state,\n    callback\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","_props","useRef","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","getEventValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","append","cloneObject","Set","insert","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","useFieldArray","keyName","setFields","_getFieldArray","ids","generateId","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","appendValue","appendAt","getFocusFieldName","_updateFieldArray","argA","fillEmptyArray","prependValue","prependAt","remove","removeArrayAt","insertValue","insertAt","argB","swap","swapArrayAt","move","moveArrayAt","update","updateAt","item","isWatched","_executeSchema","then","_updateValid","useMemo","createSubject","_observers","observer","push","o","observers","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","schemaErrorLookup","join","foundError","pop","isSubmitted","reValidateMode","isValidElement","getValidateError","isMessage","validationData","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isCheckBoxInput.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isDateObject.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isNullOrUndefined.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isObject.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getEventValue.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getNodeParentName.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\isNameInFieldArray.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\compact.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isUndefined.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\get.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\constants.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\omit.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useFormContext.tsx","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getProxyFormState.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isEmptyObject.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\shouldRenderFormState.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\convertToArrayPayload.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\shouldSubscribeByName.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useSubscribe.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useFormState.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isString.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\generateWatchOutput.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isFunction.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\objectHasFunction.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useWatch.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useController.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\controller.tsx","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\appendErrors.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isKey.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\stringToPath.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\set.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\focusFieldBy.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\generateId.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getFocusFieldName.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\isWatched.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\append.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\cloneObject.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\fillEmptyArray.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\insert.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\move.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\prepend.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\remove.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\swap.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\update.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useFieldArray.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\createSubject.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isPrimitive.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\deepEqual.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\getValidationModes.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isBoolean.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isFileInput.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isHTMLElement.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isMultipleSelect.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isRadioInput.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isRadioOrCheckbox.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isWeb.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\live.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\unset.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getDirtyFields.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getCheckboxValue.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getFieldValueAs.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getRadioValue.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getFieldValue.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getResolverOptions.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isRegex.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getRuleValue.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\hasValidation.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\schemaErrorLookup.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\skipValidation.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\unsetEmptyArray.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\utils\\isMessage.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getValidateError.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\getValueAndMessage.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\validateField.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\logic\\createFormControl.ts","C:\\Users\\ASUS\\Documents\\callenderapp\\CalendarApp\\node_modules\\react-hook-form\\src\\useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      isArrayField\n        ? _shouldUnregisterField && !control._stateFlags.action\n        : _shouldUnregisterField\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    updateValues(updatedFieldArrayValues);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updatedFieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updatedFieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray(name),\n      index,\n      value,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    setFields([...updatedFieldArrayValues]);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updatedFieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(value);\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValues,\n      {},\n      [...updatedFieldArrayValues],\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && Array.isArray(get(_fields, name))) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (\n      _proxyFormState.errors &&\n      shouldSetFields &&\n      Array.isArray(get(_formState.errors, name))\n    ) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (\n      _proxyFormState.touchedFields &&\n      Array.isArray(get(_formState.touchedFields, name))\n    ) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n    }\n\n    if (_proxyFormState.dirtyFields) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName): any[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module"}